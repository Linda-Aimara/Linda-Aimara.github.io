library(TxDb.Hsapiens.UCSC.hg38.knownGene)
library(ensembldb)
library(biomaRt)
library(tximport)
library(gplots)
library(DESeq2)
library(pheatmap)
library(RColorBrewer)
library(tidyverse)
library(dplyr)
library(clusterProfiler)
library(TxDb.Hsapiens.UCSC.hg38.knownGene)
library(ensembldb)
library(biomaRt)
library(tximport)
library(gplots)
library(DESeq2)
library(pheatmap)
library(RColorBrewer)
library(tidyverse)
library(dplyr)
library(clusterProfiler)
conteos <- read.table(here("datos", "GDE_LFC_SE_vs_ES.txt"),header = TRUE)
conteos <- read.table(here("datos", "GDE_LFC_SE_vs_ES.txt"),header = TRUE)
getwd()
conteos <- read.csv("datos/countsAdultsReal.csv",row.names=1)
conteos <- read.csv(here("datos/countsAdultsReal.csv"),,row.names=1)
conteos <- read.csv(here::here("datos/countsAdultsReal.csv"),,row.names=1)
conteos <- read.csv(here::here("datos/countsAdultsReal.csv"),row.names = 1)
head(conteos)
getwd()
condition=factor(c("Ad SE","Ad SE", "Ad SE", "Ad CD3CD28","Ad CD3CD28", "Ad CD3CD28"))
meta <- data.frame(condition, row.names = colnames(counts))
rownames(meta) <- colnames(counts)
dds = DESeqDataSetFromMatrix(countData = counts, meta, ~ condition)
counts() <- read.csv(here::here("datos/countsAdultsReal.csv"),row.names = 1)
counts <- read.csv(here::here("datos/countsAdultsReal.csv"),row.names = 1)
head(counts)
condition=factor(c("Ad SE","Ad SE", "Ad SE", "Ad CD3CD28","Ad CD3CD28", "Ad CD3CD28"))
meta <- data.frame(condition, row.names = colnames(counts))
rownames(meta) <- colnames(counts)
dds = DESeqDataSetFromMatrix(countData = counts, meta, ~ condition)
dds <- estimateSizeFactors(dds)
dds = DESeqDataSetFromMatrix(countData = counts, meta, ~ condition)
dds <- estimateSizeFactors(dds)
sizeFactors(dds)
colSums(counts(dds))
condition = factor(c("Ad SE","Ad SE", "Ad SE", "Ad CD3CD28","Ad CD3CD28", "Ad CD3CD28"))
meta <- data.frame(condition, row.names = colnames(counts))
rownames(meta) <- colnames(counts)
meta <- data.frame(condition, row.names = colnames(counts))
View(meta)
View(head(counts(dds)))
colSums(counts(dds, normalized=T))
rld <- rlog(dds, blind=TRUE)
plotPCA(rld, intgroup="condition")
rld_mat <- assay(rld)
rld_cor <- cor(rld_mat)
pheatmap(rld_cor)
heat.colors <- brewer.pal(6, "Blues")
pheatmap(rld_cor, color = heat.colors, border_color=NA, fontsize = 10,
fontsize_row = 10, height=20)
dds_results <- DESeq(dds)
plotDispEsts(dds_results)
contrast <- c("condition","Ad SE","Ad CD3CD28")
res1 <- results(dds_results,contrast=c("condition","Ad SE","Ad CD3CD28"), alpha = 0.05)
res1 <- lfcShrink(dds_results, contrast = c("condition","Ad SE","Ad CD3CD28"), res=res1, type = "normal")
summary(res1)
plotMA(res1, ylim=c(-5,5), main="Genes diferencialmente expresados")
res <- data.frame(res1)
padj.cutoff <- 0.05
lfc.cutoff <- 1
lfc_0<-0
res_table1 <- res %>% data.frame()%>%rownames_to_column(var="gene") %>% as_tibble()
sig1_padj<-res %>% filter(padj <=padj.cutoff)
sig1 <- res_table1 %>% filter((padj < padj.cutoff) & (abs(log2FoldChange) > lfc.cutoff)) %>% arrange(desc(log2FoldChange))
sigA <- res_table1 %>% filter(padj < padj.cutoff & log2FoldChange > lfc.cutoff)
sigCD3CD28<- res_table1 %>% filter(padj < padj.cutoff & log2FoldChange < -lfc.cutoff)
dim(sigA)
dim(sigCD3CD28)
dim(sig1)
head(sigCD3CD28, n=100)
write.table(sigA, "Ad.txt")
write.table(sigCD3CD28, "AdCD3CD28.txt")
write.table(sigA, file="resultados_tablas/Ad.txt")
getwd()
write.table(sigA,file=here("resultados_tablas/Ad.txt"), sep = "\t", col.names = TRUE)
write.table(sigA,file = here("resultados_tablas/Ad.txt"), sep = "\t", col.names = TRUE)
library(TxDb.Hsapiens.UCSC.hg38.knownGene)
library(ensembldb)
library(biomaRt)
library(tximport)
library(gplots)
library(DESeq2)
library(pheatmap)
library(RColorBrewer)
library(tidyverse)
library(dplyr)
library(clusterProfiler)
library(here)
counts <- read.csv(here::here("datos/countsAdultsReal.csv"),row.names = 1)
head(counts)
condition = factor(c("Ad SE","Ad SE", "Ad SE", "Ad CD3CD28","Ad CD3CD28", "Ad CD3CD28"))
meta <- data.frame(condition, row.names = colnames(counts))
View(meta)
rownames(meta) <- colnames(counts)
dds = DESeqDataSetFromMatrix(countData = counts, meta, ~ condition)
dds <- estimateSizeFactors(dds)
sizeFactors(dds)
colSums(counts(dds))
View(head(counts(dds)))
colSums(counts(dds, normalized=T))
rld <- rlog(dds, blind=TRUE)
plotPCA(rld, intgroup="condition")
rld_mat <- assay(rld)
rld_cor <- cor(rld_mat)
pheatmap(rld_cor)
heat.colors <- brewer.pal(6, "Blues")
pheatmap(rld_cor, color = heat.colors, border_color=NA, fontsize = 10,
fontsize_row = 10, height=20)
dds_results <- DESeq(dds)
plotDispEsts(dds_results)
contrast <- c("condition","Ad SE","Ad CD3CD28")
res1 <- results(dds_results,contrast=c("condition","Ad SE","Ad CD3CD28"), alpha = 0.05)
res1 <- lfcShrink(dds_results, contrast = c("condition","Ad SE","Ad CD3CD28"), res=res1, type = "normal")
summary(res1)
plotMA(res1, ylim=c(-5,5), main="Genes diferencialmente expresados")
res <- data.frame(res1)
padj.cutoff <- 0.05
lfc.cutoff <- 1
lfc_0<-0
res_table1 <- res %>% data.frame()%>%rownames_to_column(var="gene") %>% as_tibble()
sig1_padj<-res %>% filter(padj <=padj.cutoff)
sig1 <- res_table1 %>% filter((padj < padj.cutoff) & (abs(log2FoldChange) > lfc.cutoff)) %>% arrange(desc(log2FoldChange))
sigA <- res_table1 %>% filter(padj < padj.cutoff & log2FoldChange > lfc.cutoff)
sigCD3CD28<- res_table1 %>% filter(padj < padj.cutoff & log2FoldChange < -lfc.cutoff)
dim(sigA)
dim(sigCD3CD28)
dim(sig1)
head(sigCD3CD28, n=100)
write.table(sigA,file = here("resultados_tablas/Ad.txt"), sep = "\t", col.names = TRUE)
write.table(sigCD3CD28, file= here("AdCD3CD28.txt"), sep = "\t", col.names = TRUE)
library(clusterProfiler)
library(org.Hs.eg.db)
library(ggplot2)
#packageDescription("clusterProfiler")
SE <-sigA$gene
ES <-sigCD3CD28$gene
GDE_SE = bitr(SE, fromType="SYMBOL", toType="ENTREZID", OrgDb="org.Hs.eg.db")
View(GDE_SE)
GDE_ES = bitr(ES, fromType="SYMBOL", toType="ENTREZID", OrgDb="org.Hs.eg.db")
View(GDE_ES)
GDE_SE_ENTREZ <-GDE_SE$ENTREZID
GDE_ES_ENTREZ <-GDE_ES$ENTREZID
mi_lista <- list("SE_ADULTOS" = GDE_SE_ENTREZ, "ES_Adultos" = GDE_ES_ENTREZ)
ck1 <- compareCluster(geneCluster = mi_lista, fun = "enrichGO", OrgDb = "org.Hs.eg.db",ont = "BP")
pdf("cluster_enrichGO_adultos_CD8_T_cells.pdf")
head(as.data.frame(ck1))
x<-(as.data.frame(ck1))
write.table(x,file = "listas_enrichGO_PE.txt", sep="\t", col.names = TRUE)
View(ck1)
figura_anlisis_funcional <- dotplot(ck1,showCategory = 10,font.size=10.5)+ ggtitle("Functional enrichment analysis visualization")
figura_anlisis_funcional
dev.off()
pdf(file = here("resultados_tablas/cluster_enrichGO_adultos_CD8_T_cells.pdf"))
head(as.data.frame(ck1))
x <- (as.data.frame(ck1))
write.table(x,file = here( "resultados_tablas/listas_enrichGO_PE.txt"), sep="\t", col.names = TRUE)
View(ck1)
mi_lista <- list("SE_ADULTOS" = GDE_SE_ENTREZ, "ES_Adultos" = GDE_ES_ENTREZ)
ck1 <- compareCluster(geneCluster = mi_lista, fun = "enrichGO", OrgDb = "org.Hs.eg.db",ont = "BP")
pdf(file = here("resultados_tablas/cluster_enrichGO_adultos_CD8_T_cells.pdf"))
head(as.data.frame(ck1))
x <- (as.data.frame(ck1))
write.table(x,file = here( "resultados_tablas/listas_enrichGO_PE.txt"), sep="\t", col.names = TRUE)
View(ck1)
figura_anlisis_funcional <- dotplot(ck1,showCategory = 10,font.size=10.5)+ ggtitle("Functional enrichment analysis visualization")
figura_anlisis_funcional
dev.off()
png(here("imagenes/plotPCA.png"))
plotPCA(rld, intgroup="condition")
dev.off()
tiff("test.tiff", units="in", width=5, height=5, res=300)
plotPCA(rld, intgroup="condition")
dev.off()
tiff(here("imagenes/test.tiff"), units="in", width=5, height=5, res=300)
plotPCA(rld, intgroup="condition")
dev.off()
png(here("imagenes/test.tiff"), units="in", width=5, height=5, res=600)
plotPCA(rld, intgroup="condition")
dev.off()
png(here("imagenes/test.png"), units="in", width=5, height=5, res=600)
plotPCA(rld, intgroup="condition")
dev.off()
pheatmap(rld_cor)
heat.colors <- brewer.pal(6, "Blues")
png(here("imagenes/pheatmap.png"), units="in", width=5, height=5, res=600)
pheatmap(rld_cor, color = heat.colors, border_color=NA, fontsize = 10,
fontsize_row = 10, height=20)
dev.off()
pheatmap(rld_cor)
heat.colors <- brewer.pal(6, "Blues")
png(here("imagenes/pheatmap.png"), units="in", width=5, height=5, res=600)
pheatmap(rld_cor, color = heat.colors, border_color=NA, fontsize = 10,
fontsize_row = 10, height=20)
dev.off()
heat.colors <- brewer.pal(6, "Blues")
png(here("imagenes/pheatmap.png"), units="in", width=5, height=5, res=600)
pheatmap(rld_cor, color = heat.colors, border_color=NA, fontsize = 10,
fontsize_row = 10, height=20)
dev.off()
dds_results <- DESeq(dds)
png(here("imagenes/disp.png"), units="in", width=5, height=5, res=600)
plotDispEsts(dds_results)
dev.off()
contrast <- c("condition","Ad SE","Ad CD3CD28")
res1 <- results(dds_results,contrast=c("condition","Ad SE","Ad CD3CD28"), alpha = 0.05)
res1 <- lfcShrink(dds_results, contrast = c("condition","Ad SE","Ad CD3CD28"), res=res1, type = "normal")
summary(res1)
png(here("imagenes/disp_result.png"), units="in", width=5, height=5, res=600)
plotMA(res1, ylim=c(-5,5), main="Genes diferencialmente expresados")
dev.off()
rownames(meta) == colnames(counts)
rld_cor <- cor(rld_mat, main = "Mapa de calor de correlación entre muestras")
rld_cor <- cor(rld_mat,main = "Mapa de calor de correlación entre muestras")
rld_cor <- cor(rld_mat)
rld_cor <- cor(rld_mat)
rld_cor
## Definir el contraste entre condiciones
contrast <- c("condition","Ad SE","Ad CD3CD28")
## Obtener resultados sin reducción de LFC
res1 <- results(dds_results,contrast=c("condition","Ad SE","Ad CD3CD28"), alpha = 0.05)
## Aplicar reducción de LFC para mejorar la estimación
res1 <- lfcShrink(dds_results, contrast = c("condition","Ad SE","Ad CD3CD28"), res=res1, type = "apeglm")
res1 <- results(dds_results, contrast = c("condition", "Ad SE", "Ad CD3CD28"), alpha = 0.05)
resultsNames(dds_results)
res1_shrunk <- lfcShrink(dds_results, coef = "condition_Ad.SE_vs_Ad.CD3CD28", res = res1, type = "apeglm")
res1_shrunk <- lfcShrink(dds_results, coef = "conditionAd SE_vs_Ad CD3CD28", res = res1, type = "apeglm")
## Definir el contraste entre condiciones
contrast <- c("condition","Ad SE","Ad CD3CD28")
## Obtener resultados sin reducción de LFC
res1 <- results(dds_results,contrast = c("condition","Ad SE","Ad CD3CD28"), alpha = 0.05)
## Aplicar reducción de LFC para mejorar la estimación
res1 <- lfcShrink(dds_results, contrast = c("condition","Ad SE","Ad CD3CD28"), res=res1, type = "normal")
## Resumen de los resultados
summary(res1)
# Convertir símbolos de genes a ENTREZID
GDE_SE_ENTREZ <- bitr(sigA$gene, fromType = "SYMBOL", toType = "ENTREZID", OrgDb = org.Hs.eg.db)
GDE_ES_ENTREZ <- bitr(sigCD3CD28$gene, fromType = "SYMBOL", toType = "ENTREZID", OrgDb = org.Hs.eg.db)
head(GDE_SE_ENTREZ)
head(GDE_ES_ENTREZ)
library(TxDb.Hsapiens.UCSC.hg38.knownGene)
library(ensembldb)
library(biomaRt)
library(tximport)
library(gplots)
library(DESeq2)
library(pheatmap)
library(RColorBrewer)
library(tidyverse)
library(dplyr)
library(clusterProfiler)
library(here)
# Leer el archivo CSV “countsAdultsReal.csv” que está en la carpeta “datos”
# Se usa here::here para construir la ruta al archivo de forma robusta dentro del proyecto
counts <- read.csv(here::here("datos/countsAdultsReal.csv"),row.names = 1)
# Mostrar las primeras filas del data frame resultante (útil para verificar que se leyó correctamente)
head(counts)
# Definir el vector “condition” con las condiciones (factores) correspondientes
# Aquí se usan dos niveles: "Ad SE" y "Ad CD3CD28"
condition = factor(c("Ad SE","Ad SE", "Ad SE", "Ad CD3CD28","Ad CD3CD28", "Ad CD3CD28"))
# Crear un data.frame “meta” que contendrá esa variable “condition”
# Se asignan los nombres de fila (row.names) usando los nombres de columnas del objeto counts
meta <- data.frame(condition, row.names = colnames(counts))
head(meta)
#Asegurarse de que los nombres de las filas de “meta”
# coincidan con los nombres de columnas de “counts”
rownames(meta) == colnames(counts)
dds = DESeqDataSetFromMatrix(countData = counts, meta, ~ condition)
dds <- estimateSizeFactors(dds)
sizeFactors(dds)
colSums(counts(dds))
View(head(counts(dds)))
colSums(counts(dds, normalized=T))
rld <- rlog(dds, blind=TRUE)
## Comparar perfiles funcionales de conjuntos de genes mediante análisis de enriquecimiento GO
mi_lista <- list("SE_ADULTOS" = GDE_SE_ENTREZ, "ES_Adultos" = GDE_ES_ENTREZ)
## Realizar el análisis de enriquecimiento GO para cada conjunto de genes
ck1 <- compareCluster(geneCluster = mi_lista, fun = "enrichGO", OrgDb = "org.Hs.eg.db", ont = "BP")
## Guardar los resultados en un archivo PDF
pdf(file = here("imagenes/cluster_enrichGO_adultos_CD8_T_cells.pdf"))
head(as.data.frame(ck1))  # Mostrar las primeras filas de los resultados
x <- as.data.frame(ck1)
write.table(x, file = here("resultados_tablas/listas_enrichGO_PE.txt"), sep = "\t", col.names = TRUE)
View(ck1)  # Ver los resultados en una ventana interactiva
## Visualizar los resultados mediante un gráfico de puntos
dotplot(ck1, showCategory = 10, font.size = 10.5) + ggtitle("Análisis de enriquecimiento funcional")
dotplot(ck1, showCategory = 10, font.size = 10.5) + ggtitle("Análisis de enriquecimiento funcional")
## Comparar perfiles funcionales de conjuntos de genes mediante análisis de enriquecimiento GO
mi_lista <- list("SE_ADULTOS" = GDE_SE_ENTREZ, "ES_Adultos" = GDE_ES_ENTREZ)
## Realizar el análisis de enriquecimiento GO para cada conjunto de genes
ck1 <- compareCluster(geneCluster = mi_lista, fun = "enrichGO", OrgDb = "org.Hs.eg.db", ont = "BP")
## Comparar perfiles funcionales de conjuntos de genes mediante análisis de enriquecimiento GO
mi_lista <- list("SE_ADULTOS" = GDE_SE_ENTREZ, "ES_Adultos" = GDE_ES_ENTREZ)
mi_lista
## Realizar el análisis de enriquecimiento GO para cada conjunto de genes
ck1 <- compareCluster(geneCluster = mi_lista, fun = "enrichGO", OrgDb = "org.Hs.eg.db", ont = "BP")
mi_lista <- list("SE_ADULTOS" = GDE_SE_ENTREZ, "ES_Adultos" = GDE_ES_ENTREZ)
ck1 <- compareCluster(geneCluster = mi_lista, fun = "enrichGO", OrgDb = "org.Hs.eg.db",ont = "BP")
# Convertir símbolos de genes a ENTREZID
GDE_SE_ENTREZ <- bitr(sigA$gene, fromType = "SYMBOL", toType = "ENTREZID", OrgDb = org.Hs.eg.db)
GDE_ES_ENTREZ <- bitr(sigCD3CD28$gene, fromType = "SYMBOL", toType = "ENTREZID", OrgDb = org.Hs.eg.db)
head(GDE_SE_ENTREZ)
head(GDE_ES_ENTREZ)
## Comparar perfiles funcionales de conjuntos de genes mediante análisis de enriquecimiento GO
mi_lista <- list("SE_ADULTOS" = GDE_SE_ENTREZ, "ES_Adultos" = GDE_ES_ENTREZ)
## Realizar el análisis de enriquecimiento GO para cada conjunto de genes
ck1 <- compareCluster(geneCluster = mi_lista, fun = "enrichGO", OrgDb = "org.Hs.eg.db", ont = "BP")
## Guardar los resultados en un archivo PDF
pdf(file = here("imagenes/cluster_enrichGO_adultos_CD8_T_cells.pdf"))
head(as.data.frame(ck1))  # Mostrar las primeras filas de los resultados
x <- as.data.frame(ck1)
write.table(x, file = here("resultados_tablas/listas_enrichGO_PE.txt"), sep = "\t", col.names = TRUE)
View(ck1)  # Ver los resultados en una ventana interactiva
## Visualizar los resultados mediante un gráfico de puntos
dotplot(ck1, showCategory = 10, font.size = 10.5) + ggtitle("Análisis de enriquecimiento funcional")
library(clusterProfiler)
library(org.Hs.eg.db)
library(ggplot2)
#packageDescription("clusterProfiler")
## Comparar perfiles funcionales de conjuntos de genes mediante análisis de enriquecimiento GO
mi_lista <- list("SE_ADULTOS" = GDE_SE_ENTREZ, "ES_Adultos" = GDE_ES_ENTREZ)
## Realizar el análisis de enriquecimiento GO para cada conjunto de genes
ck1 <- compareCluster(geneCluster = mi_lista, fun = "enrichGO", OrgDb = "org.Hs.eg.db", ont = "BP")
## Guardar los resultados en un archivo PDF
pdf(file = here("imagenes/cluster_enrichGO_adultos_CD8_T_cells.pdf"))
head(as.data.frame(ck1))  # Mostrar las primeras filas de los resultados
x <- as.data.frame(ck1)
write.table(x, file = here("resultados_tablas/listas_enrichGO_PE.txt"), sep = "\t", col.names = TRUE)
View(ck1)  # Ver los resultados en una ventana interactiva
## Visualizar los resultados mediante un gráfico de puntos
dotplot(ck1, showCategory = 10, font.size = 10.5) + ggtitle("Análisis de enriquecimiento funcional")
mi_lista <- list("SE_ADULTOS" = GDE_SE_ENTREZ, "ES_Adultos" = GDE_ES_ENTREZ)
ck1 <- compareCluster(geneCluster = mi_lista, fun = "enrichGO", OrgDb = "org.Hs.eg.db",ont = "BP")
SE <-sigA$gene
ES <-sigCD3CD28$gene
GDE_SE = bitr(SE, fromType="SYMBOL", toType="ENTREZID", OrgDb="org.Hs.eg.db")
View(GDE_SE)
GDE_ES = bitr(ES, fromType="SYMBOL", toType="ENTREZID", OrgDb="org.Hs.eg.db")
View(GDE_ES)
GDE_SE_ENTREZ <-GDE_SE$ENTREZID
GDE_ES_ENTREZ <-GDE_ES$ENTREZID
## Comparar perfiles funcionales de conjuntos de genes mediante análisis de enriquecimiento GO
mi_lista <- list("SE_ADULTOS" = GDE_SE_ENTREZ, "ES_Adultos" = GDE_ES_ENTREZ)
## Realizar el análisis de enriquecimiento GO para cada conjunto de genes
ck1 <- compareCluster(geneCluster = mi_lista, fun = "enrichGO", OrgDb = "org.Hs.eg.db", ont = "BP")
## Guardar los resultados en un archivo PDF
pdf(file = here("imagenes/cluster_enrichGO_adultos_CD8_T_cells.pdf"))
head(as.data.frame(ck1))  # Mostrar las primeras filas de los resultados
x <- as.data.frame(ck1)
write.table(x, file = here("resultados_tablas/listas_enrichGO_PE.txt"), sep = "\t", col.names = TRUE)
View(ck1)  # Ver los resultados en una ventana interactiva
## Visualizar los resultados mediante un gráfico de puntos
dotplot(ck1, showCategory = 10, font.size = 10.5) + ggtitle("Análisis de enriquecimiento funcional")
dev.off()
EnhancedVolcano(res1,
lab = rownames(res1),
x = 'log2FoldChange',
y = 'pvalue',
pCutoff = 0.05,               # Umbral de significancia estadística
FCcutoff = 1,                 # Umbral de log₂ fold change
title = 'Volcano Plot: Genes Diferencialmente Expresados',
subtitle = 'Condición Ad SE vs Ad CD3CD28',
caption = paste('Total de genes:', nrow(res1)),
col = c('gray', 'blue', 'red', 'green'),
colAlpha = 0.6,
legendLabels = c('No significativo', 'Solo FC', 'Solo p-valor', 'Ambos'),
legendPosition = 'topright',
labSize = 3,
labCol = 'black',
labFace = 'italic',
boxedLabels = TRUE,
drawConnectors = TRUE,
widthConnectors = 0.5
)
library(EnhancedVolcano)
EnhancedVolcano(res1,
lab = rownames(res1),
x = 'log2FoldChange',
y = 'pvalue',
pCutoff = 0.05,               # Umbral de significancia estadística
FCcutoff = 1,                 # Umbral de log₂ fold change
title = 'Volcano Plot: Genes Diferencialmente Expresados',
subtitle = 'Condición Ad SE vs Ad CD3CD28',
caption = paste('Total de genes:', nrow(res1)),
col = c('gray', 'blue', 'red', 'green'),
colAlpha = 0.6,
legendLabels = c('No significativo', 'Solo FC', 'Solo p-valor', 'Ambos'),
legendPosition = 'topright',
labSize = 3,
labCol = 'black',
labFace = 'italic',
boxedLabels = TRUE,
drawConnectors = TRUE,
widthConnectors = 0.5
)
ok<- EnhancedVolcano(res1,
lab = rownames(res1),
x = 'log2FoldChange',
y = 'pvalue',
pCutoff = 0.05,               # Umbral de significancia estadística
FCcutoff = 1,                 # Umbral de log₂ fold change
title = 'Volcano Plot: Genes Diferencialmente Expresados',
subtitle = 'Condición Ad SE vs Ad CD3CD28',
caption = paste('Total de genes:', nrow(res1)),
col = c('gray', 'blue', 'red', 'green'),
colAlpha = 0.6,
legendLabels = c('No significativo', 'Solo FC', 'Solo p-valor', 'Ambos'),
legendPosition = 'topright',
labSize = 3,
labCol = 'black',
labFace = 'italic',
boxedLabels = TRUE,
drawConnectors = TRUE,
widthConnectors = 0.5
)
ok
ok <- EnhancedVolcano(res1,
lab = rownames(res1),
x = 'log2FoldChange',
y = 'pvalue',
pCutoff = 0.05,               # Umbral de significancia estadística
FCcutoff = 1,                 # Umbral de log₂ fold change
title = 'Volcano Plot: Genes Diferencialmente Expresados',
subtitle = 'Condición Ad SE vs Ad CD3CD28',
caption = paste('Total de genes:', nrow(res1)),
col = c('gray', 'blue', 'red', 'green'),
colAlpha = 0.6,
legendLabels = c('No significativo', 'Solo FC', 'Solo p-valor', 'Ambos'),
legendPosition = 'topright',
labSize = 3,
labCol = 'black',
labFace = 'italic',
boxedLabels = TRUE,
drawConnectors = TRUE,
widthConnectors = 0.5
)
ok
png(here("imagenes/volcano_ok_plot.png"), units="in", width=5, height=5, res=600)
EnhancedVolcano(res1,
lab = rownames(res1),
x = 'log2FoldChange',
y = 'pvalue',
pCutoff = 0.05,               # Umbral de significancia estadística
FCcutoff = 1,                 # Umbral de log₂ fold change
title = 'Volcano Plot: Genes Diferencialmente Expresados',
subtitle = 'Condición Ad SE vs Ad CD3CD28',
caption = paste('Total de genes:', nrow(res1)),
col = c('gray', 'blue', 'red', 'green'),
colAlpha = 0.6,
legendLabels = c('No significativo', 'Solo FC', 'Solo p-valor', 'Ambos'),
legendPosition = 'topright',
labSize = 3,
labCol = 'black',
labFace = 'italic',
boxedLabels = TRUE,
drawConnectors = TRUE,
widthConnectors = 0.5
)
dev.off()
tinytex::reinstall_tinytex(repository = "illinois")
